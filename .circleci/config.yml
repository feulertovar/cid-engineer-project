version: 2.1
orbs:
  # https://circleci.com/developer/orbs/orb/circleci/node
  node: circleci/node@4.1.0
  # https://circleci.com/developer/orbs/orb/circleci/aws-ecr
  aws-ecr: circleci/aws-ecr@6.5.0
  # https://circleci.com/developer/orbs/orb/circleci/aws-ecs
  aws-ecs: circleci/aws-ecs@0.0.10
jobs:
  build:
    executor:
      name: node/default
      tag: 14.15.1
    steps:
    - checkout
    - node/install-packages:
        pkg-manager: npm
    - run:
        command: npm run test
        name: Run unit tests
  test:
    executor:
      name: node/default
      tag: 14.15.1
    steps:
      # Reuse the workspace from the build job
      - attach_workspace:
         at: .
      - run:
          command: curl -i ${AWS_CID_ENDPOINT}
          name: Test EC2 HTTP endpoint 
workflows:
  node-deploy:
    jobs:
      #build only when updates are pushed to master branch
      - build:
          filters:
            branches:
                only: 
                  - master
      # Build and push ECR image to repository
      # Envs: AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_REGION, AWS_ECR_ACCOUNT_URL
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL
          repo: '${MY_APP_PREFIX}'
          region: AWS_REGION
          dockerfile: Dockerfile
          tag: '${CIRCLE_SHA1}'
          path: .
          requires:
          - build
      # Deploy,update and push service image, task definition to ECS  
      - aws-ecs/deploy-service-update:
          requires:
            - aws-ecr/build-and-push-image
          family: '${MY_APP_PREFIX}-service'
          cluster-name: '${MY_APP_PREFIX}-cluster'
          container-image-name-updates: 'container=${MY_APP_PREFIX}-service,tag=${CIRCLE_SHA1}'
          verify-revision-is-deployed: true
          # Test ELB HTTP end point after deploy
          post-steps:
                - run:
                    name: Test deployment ELB HTTP
                    command: |
                      TARGET_GROUP_ARN=$(aws ecs describe-services --cluster ${MY_APP_PREFIX}-cluster --services ${MY_APP_PREFIX}-service | jq -r '.services[0].loadBalancers[0].targetGroupArn')
                      ELB_ARN=$(aws elbv2 describe-target-groups --target-group-arns $TARGET_GROUP_ARN | jq -r '.TargetGroups[0].LoadBalancerArns[0]')
                      ELB_DNS_NAME=$(aws elbv2 describe-load-balancers --load-balancer-arns $ELB_ARN | jq -r '.LoadBalancers[0].DNSName')
                      curl -s --retry 10 http://$ELB_DNS_NAME
      # Test EC2 HTTP end point after deploy
      - test:
          requires:
            - aws-ecs/deploy-service-update           